---
import EditNote from '~components/EditNote.svelte';
import HeadingBar from '~components/HeadingBar.svelte';
import NoteBody from '~components/NoteBody.svelte';
import NotesList from '~components/NotesList.svelte';
import Layout from '~layouts/Layout.astro';
import type { Note } from '~types/note';
import { getDomainUrl } from '~utilities/utilities';

const { request, url } = Astro;
const domainUrl = getDomainUrl(request);
const { searchParams } = url;

const selectedId = searchParams.get('note');
const editMode = searchParams.get('edit') === 'true';

const response = await fetch(`${domainUrl}/api`, { method: 'GET' });
const { notes }: { notes: Note[] } = await response.json();
const selectedNote = notes.find(({ id }) => id === selectedId) ?? notes[0];

const title = 'Upstash Astro Notes';
---

<Layout title={title}>
  <main class="wrapper">
    <h1>{title}</h1>
    <div class="container">
      <header class="heading">
        {selectedNote ? <HeadingBar client:load note={selectedNote} {editMode} /> : null}
      </header>
      <aside class="list">
        <NotesList client:load {notes} {selectedId} {editMode} />
      </aside>
      <section class="note">
        {editMode && selectedNote ? <EditNote client:load note={selectedNote} /> : null}
        {!editMode && selectedNote ? <NoteBody note={selectedNote} /> : null}
      </section>
    </div>
  </main>
</Layout>

<style>
	h1 {
		font-family: var(--font-family-heading);
		font-size: var(--font-size-4);
		margin-bottom: var(--spacing-16);
	}

	@media screen and (width >=48rem) {
		h1 {
			font-size: var(--font-size-6);
		}
	}

	.wrapper {
		width: min(var(--max-width-full) - var(--spacing-16), var(--max-width-wrapper));
		margin: var(--spacing-4) auto var(--spacing-32);
		padding-top: var(--spacing-16);
		min-height: 100vh;
	}

	.container {
		display: grid;
		--heading-row-height: var(--spacing-18);
		--body-height: 25rem;
		grid-template-columns: auto;
		grid-template-rows: auto var(--heading-row-height) var(--body-height);
		grid-template-areas:
			'list'
			'heading'
			'note';
		border: var(--spacing-px) solid var(--colour-theme);
		border-radius: var(--spacing-1);
		background-color: var(--colour-light-tint-20);
		box-shadow: var(--shadow-elevation-low);
	}

	@media screen and (width >=48rem) {
		.container {
			grid-template-columns: 15rem auto;
			grid-template-rows: var(--heading-row-height) var(--body-height);
			grid-template-areas:
				'list heading'
				'list note';
		}
	}

	.heading {
		grid-area: heading;
		border-bottom: var(--spacing-px) solid var(--colour-dark);
		background-color: var(--colour-theme);
		color: var(--colour-light);
		font-family: var(--font-family-heading);
	}

	.list {
		grid-area: list;
		background-color: var(--colour-light-tint-60);
		border-radius: var(--spacing-0) var(--spacing-0) var(--spacing-0) var(--spacing-1);
	}

	.note {
		grid-area: note;
		border-radius: var(--spacing-0) var(--spacing-0) var(--spacing-1) var(--spacing-0);
	}
</style>
